(env
 (dev     (flags :standard -rectypes))
 (release (flags :standard -rectypes)))

(rule
 (targets Makefile.libs)
 (action (with-stdout-to %{targets} (run mklibfs))))

(rule
 (targets coq-pkgs)
 (deps
   (package coq)
   (source_tree coq-addons)
   ; (source_tree coq-external))
 )
 (action
  (progn
   (run mkdir -p coq-pkgs)
   (run make -f %{dep:Makefile.libs} libs-auto)
   (bash "for i in %{env:ADDONS=}; do make -sf coq-addons/$i.addon jscoq-install; done")
   ; This always rebuilds :(
   (bash "for i in $(find coq-pkgs \\( -name *.cmo -or -name *.cma \\)); do if [ $i -nt $i.js ]; then js_of_ocaml --wrap-with-fun= -o $i.js $i; fi; done")
   (run mklibjson))))

(rule
 (targets node_modules)
 (deps
   package.json
   package-lock.json)
 (action (run npm install)))

(alias
 (name jscoq)
 (deps
   (source_tree ui-js)
   (source_tree ui-css)
   (source_tree ui-images)
   (source_tree ui-external)
   (source_tree examples)
   index.html
   coq-pkgs
   node_modules
   coq-js/jscoq_worker.bc.js))

(alias
 (name libs-pkg)
 (deps coq-pkgs)
 (action
   (progn
    ; Pending on proper support for globs inside directory targets
    (bash "node %{dep:coq-jslib/mkpkg.js} coq-pkgs/*.json")
    (bash "node %{dep:coq-jslib/mkdeps.js} coq-pkgs/init.json coq-pkgs/coq-*.json %{env:COQDIR=}/.vfiles.d"))))

; (dirs (:standard \ coq-external))
