diff --git a/engine/logic_monad.ml b/engine/logic_monad.ml
index e0c24f0..1431174 100644
--- a/engine/logic_monad.ml
+++ b/engine/logic_monad.ml
@@ -145,6 +145,17 @@ type ('a, 'b, 'e) list_view =
   | Nil of 'e
   | Cons of 'a * ('e -> 'b)
 
+
+type 'a thunk =
+    | Fin of 'a
+    | TailCall of (unit -> 'a thunk)
+
+let rec trampoline r = match r with
+    | Fin a -> a
+    | TailCall f -> trampoline (f ())
+
+
+
 module BackState =
 struct
 
@@ -181,11 +192,11 @@ struct
 
   type ('a, 'i, 'o, 'e) t =
       { iolist : 'r. 'i -> ('e -> 'r NonLogical.t) ->
-                     ('a -> 'o -> ('e -> 'r NonLogical.t) -> 'r NonLogical.t) ->
-                     'r NonLogical.t }
+                     ('a -> 'o -> ('e -> 'r NonLogical.t) -> 'r NonLogical.t thunk) ->
+                     'r NonLogical.t thunk }
 
   let return x =
-    { iolist = fun s nil cons -> cons x s nil }
+    { iolist = fun s nil cons -> TailCall (fun () -> cons x s nil) }
 
   let (>>=) m f =
     { iolist = fun s nil cons ->
@@ -199,16 +210,16 @@ struct
     { iolist = fun s nil cons -> m.iolist s nil (fun x s next -> cons (f x) s next) }
 
   let zero e =
-    { iolist = fun _ nil cons -> nil e }
+    { iolist = fun _ nil cons -> Fin (nil e) }
 
   let plus m1 m2 =
-    { iolist = fun s nil cons -> m1.iolist s (fun e -> (m2 e).iolist s nil cons) cons }
+    { iolist = fun s nil cons -> m1.iolist s (fun e -> trampoline @@ (m2 e).iolist s nil cons) cons }
 
   let ignore m =
     { iolist = fun s nil cons -> m.iolist s nil (fun _ s next -> cons () s next) }
 
   let lift m =
-    { iolist = fun s nil cons -> NonLogical.(m >>= fun x -> cons x s nil) }
+    { iolist = fun s nil cons -> Fin NonLogical.(m >>= fun x -> trampoline @@ cons x s nil) }
 
   (** State related *)
 
@@ -247,30 +258,31 @@ struct
     { iolist = fun s0 nil cons ->
       let next = function
       | Nil e -> nil e
-      | Cons ((x, s), l) -> cons x s (fun e -> (reflect (l e)).iolist s0 nil cons)
+      | Cons ((x, s), l) -> trampoline @@ cons x s (fun e -> trampoline @@ (reflect (l e)).iolist s0 nil cons)
       in
-      NonLogical.(m >>= next)
+      Fin NonLogical.(m >>= next)
     }
 
   let split m : ((_, _, _) list_view, _, _, _) t =
     let rnil e = NonLogical.return (Nil e) in
-    let rcons p s l = NonLogical.return (Cons ((p, s), l)) in
+    let rcons p s l = Fin (NonLogical.return (Cons ((p, s), l))) in
     { iolist = fun s nil cons ->
       let open NonLogical in
-      m.iolist s rnil rcons >>= begin function
-      | Nil e -> cons (Nil e) s nil
+      Fin ((trampoline @@
+      m.iolist s rnil rcons) >>= begin function
+      | Nil e -> trampoline @@ cons (Nil e) s nil
       | Cons ((x, s), l) ->
         let l e = reflect (l e) in
-        cons (Cons (x, l)) s nil
-      end }
+        trampoline @@ cons (Cons (x, l)) s nil
+      end) }
 
   let run m s =
     let rnil e = NonLogical.return (Nil e) in
     let rcons x s l =
       let p = (x, s) in
-      NonLogical.return (Cons (p, l))
+      Fin (NonLogical.return (Cons (p, l)))
     in
-    m.iolist s rnil rcons
+    trampoline @@ m.iolist s rnil rcons
 
   let repr x = x
 end
@@ -350,7 +362,7 @@ struct
       writer) and efficiency. *)
 
   let get =
-    { iolist = fun s nil cons -> cons s.sstate s nil }
+    { iolist = fun s nil cons -> TailCall (fun () -> cons s.sstate s nil) }
 
   let set (sstate : P.s) =
     { iolist = fun s nil cons -> cons () { s with sstate } nil }
@@ -379,8 +391,8 @@ struct
     let rnil e = NonLogical.return (Nil e) in
     let rcons x s l =
       let p = (x, s.sstate, s.wstate, s.ustate) in
-      NonLogical.return (Cons (p, l))
+      Fin (NonLogical.return (Cons (p, l)))
     in
-    m.iolist s rnil rcons
+    trampoline @@ m.iolist s rnil rcons
 
  end
